from aiogram import F, Router
from aiogram.enums import ContentType
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from google_sheets.wrapper import GoogleSheetsWrapper
from ke_parser.ke_parser import KEParser
from keyboards import keyboards as kb
from states import FSM

router = Router(name=__name__)


@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext) -> None:
    await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kb.menu)
    await state.clear()


@router.message(CommandStart())
async def start(message: Message) -> None:
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –ê–Ω–∞–ª–∏–∑ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –ö–ï", reply_markup=kb.menu
    )


@router.message(F.text == "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü", StateFilter(None))
async def tables_update(message: Message, state: FSMContext) -> None:
    await message.answer(
        "–ö–∞–∫—É—é —Ç–∞–±–ª–∏—Ü—É –æ–±–Ω–æ–≤–∏—Ç—å?", reply_markup=kb.update_tables
    )
    await state.set_state(FSM.update_tables)


@router.message(F.text == "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç", FSM.update_tables)
async def update_daily(
    message: Message, state: FSMContext, gs: GoogleSheetsWrapper
) -> None:
    await message.answer("üïí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...", reply_markup=kb.menu)
    await state.clear()
    await gs.daily_task(message.from_user.id)
    await message.answer(
        "‚úÖ –¢–∞–±–ª–∏—Ü–∞ <b><a href='"
        f"https://docs.google.com/spreadsheets/d/{gs.spreadsheet_key}/edit#gid={gs.daily_report_table_id}"
        "'>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç</a></b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        disable_web_page_preview=True
    )


@router.message(F.text == "–û—Ç—á—ë—Ç –º–æ–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤", FSM.update_tables)
async def update_my_shop(
    message: Message, state: FSMContext, gs: GoogleSheetsWrapper
) -> None:
    await message.answer("üïí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...", reply_markup=kb.menu)
    await state.clear()
    await gs.shop_task(
        gs.my_shop_task_table,
        gs.my_shop_report_table,
        message.from_user.id
    )
    await message.answer(
        "‚úÖ –¢–∞–±–ª–∏—Ü–∞ <b><a href='"
        f"https://docs.google.com/spreadsheets/d/{gs.spreadsheet_key}/edit#gid={gs.my_shop_report_table_id}"
        "'>–û—Ç—á—ë—Ç –º–æ–∏—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤</a></b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        disable_web_page_preview=True
    )


@router.message(F.text == "–û—Ç—á—ë—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞", FSM.update_tables)
async def update_com_shop(
    message: Message, state: FSMContext, gs: GoogleSheetsWrapper
) -> None:
    await message.answer("üïí –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...", reply_markup=kb.menu)
    await state.clear()
    await gs.shop_task(
        gs.com_shop_task_table,
        gs.com_shop_report_table,
        message.from_user.id
    )
    await message.answer(
        "‚úÖ –¢–∞–±–ª–∏—Ü–∞ <b><a href="
        f"\"https://docs.google.com/spreadsheets/d/{gs.spreadsheet_key}/edit#gid={gs.com_shop_report_table_id}"
        "\">–û—Ç—á—ë—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞</a></b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        disable_web_page_preview=True
    )


@router.message(F.text == "–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã", FSM.update_tables)
async def update_all_tables(
    message: Message, state: FSMContext, gs: GoogleSheetsWrapper
) -> None:
    await update_daily(message, state, gs)
    await update_my_shop(message, state, gs)
    await update_com_shop(message, state, gs)


@router.message(FSM.update_tables)
async def update_unknown(message: Message) -> None:
    await message.answer(
        "‚ùå –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        reply_markup=kb.update_tables,
    )


@router.message(F.text == "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥", StateFilter(None))
async def get_rating(message: Message, state: FSMContext) -> None:
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä", reply_markup=kb.cancel)
    await state.set_state(FSM.get_ratings)


@router.message(FSM.get_ratings)
async def get_ratings(
    message: Message, state: FSMContext, ke_parser: KEParser
) -> None:
    await message.answer("üïí –ò—â—É –¥–∞–Ω–Ω—ã–µ...", reply_markup=kb.menu)
    try:
        ratings = await ke_parser.get_ratings_info(message.text)
        print(ratings)
        res = f"<b><a href=\"{ratings.link}\">{ratings.title}</a></b> "\
                f"({ratings.rating}‚≠êÔ∏è)\n"
        for sku_item in ratings.items:
            res += f"{sku_item.characteristic} {sku_item.rating}‚≠êÔ∏è\n"
            res += f"SKUID: {sku_item.sku_id}\n"
            res += f"–ó–∞–∫–∞–∑–æ–≤: {sku_item.orders}\n"
            res += f"–û—Ç–∑—ã–≤–æ–≤: {sku_item.reviews}\n\n"
        await message.answer(
            res, reply_markup=kb.menu, disable_web_page_preview=True
        )
    except LookupError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤", reply_markup=kb.menu
        )
    await state.clear()


@router.message(F.content_type == ContentType.ANY)
async def unknown(message: Message):
    await message.answer("‚ùå –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é", reply_markup=kb.menu)
